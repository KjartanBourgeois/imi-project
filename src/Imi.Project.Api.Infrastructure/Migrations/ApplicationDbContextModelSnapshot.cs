// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Hoofdgerecht"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Voorgerecht"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Bijgerecht"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Hapjes"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Snacks"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Dessert"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Brood"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Soepen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Aperitief"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Smoothies"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Name = "Milkshakes"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Name = "Warme sausen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Name = "Dips"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Name = "Babyvoeding"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Name = "Vegan"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Rode peper"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Soja Saus"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Aardappel"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Tomaat"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Ei"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Knoflook"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Pompoen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Vodka"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Yoghurt"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Melk"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Name = "Boter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Name = "Olijfolie"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Name = "Wortel"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Name = "Zout"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Kitchen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Kitchens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Indisch"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Chinees"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Frans"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Italiaans"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Belgisch"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Grieks"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Spaans"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Mexicaans"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Japans"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Libanees"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Name = "Thais"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Name = "Arabisch"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Name = "Thuiskeuken"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Name = "Amerikaans"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Name = "Andere"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("KitchenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPersons")
                        .HasColumnType("int");

                    b.Property<Guid>("ThemeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WebsiteLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("KitchenId");

                    b.HasIndex("ThemeId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2021, 11, 24, 10, 1, 56, 483, DateTimeKind.Local).AddTicks(5093),
                            Image = "https://www.alleskunner.be/images/nasigoreng.png",
                            Instructions = "Voeg 1 rode peper en 16 gr geschilde gember toe aan de mengbeker 3 sec/snelheid 8; Schraap naar beneden voeg 2 uien en 2 teentjes knoflook toe 5 sec/snelheid 5",
                            KitchenId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Nasi Goreng",
                            NumberOfPersons = 6,
                            ThemeId = new Guid("00000000-0000-0000-0000-000000000011"),
                            WebsiteLink = "https://www.alleskunner.be/recepten/nasigoreng.php"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2021, 11, 24, 10, 1, 56, 486, DateTimeKind.Local).AddTicks(4044),
                            Image = "https://www.alleskunner.be/images/dumplings.png",
                            Instructions = "Maak eerst de dipsaus door 10 gr sojasaus, 10 gr sesamolie, 10 gr honing, ½ eetl sesamzaad, 10 gr sriracha - hot chilisaus, 10 gr mirin aan de mengbeker 10 sec/ snelheid 3; Voeg toe aan een klein dresseerpotje, zet opzij ",
                            KitchenId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Dumplings",
                            NumberOfPersons = 4,
                            ThemeId = new Guid("00000000-0000-0000-0000-000000000011"),
                            WebsiteLink = "https://www.alleskunner.be/recepten/dumplings.php"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2021, 11, 24, 10, 1, 56, 486, DateTimeKind.Local).AddTicks(4131),
                            Image = "https://www.alleskunner.be/images/aardappelpuree.png",
                            Instructions = "Doe de aardappelen in blokjes, water of melk, schepje groentenbouillon voor water = 20 minuten/100 graden/linksomdraai/ snelheid lepeltje roerstand thermomix, voor melk= 20 minuten/98 graden/ linksomdraai/snelheid lepeltje; Doe nu de kruiding zout, peper, nootmuskaat en klein beetje olijfolie of boter linksomdraai/snelheid 4 en door het gaatje bovenaan kan je de structuur van je puree zien en stoppen bij je gewenste structuur. ",
                            KitchenId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Aardappelpuree",
                            NumberOfPersons = 4,
                            ThemeId = new Guid("00000000-0000-0000-0000-000000000012"),
                            WebsiteLink = "https://www.alleskunner.be/recepten/aardappelpuree.php"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2021, 11, 24, 10, 1, 56, 486, DateTimeKind.Local).AddTicks(4148),
                            Image = "https://www.alleskunner.be/images/bruschetta.png",
                            Instructions = "Voeg de tijm, oregano en basilicum toe, 3 seconden /snelheid 8; Haal de kruiden eruit en zet opzij",
                            KitchenId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Bruschetta",
                            NumberOfPersons = 3,
                            ThemeId = new Guid("00000000-0000-0000-0000-000000000004"),
                            WebsiteLink = "https://www.alleskunner.be/recepten/bruschetta.php"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedOn = new DateTime(2021, 11, 24, 10, 1, 56, 486, DateTimeKind.Local).AddTicks(4160),
                            Image = "https://www.alleskunner.be/images/brusselse-wafels.png",
                            Instructions = "Split de eieren en voeg de eiwitten toe aan de mengbeker, voeg de vlinder toe 2 min/snelheid 4; Haal opgeklopt eiwit eruit en zet opzij",
                            KitchenId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Brussels wafels",
                            NumberOfPersons = 4,
                            ThemeId = new Guid("00000000-0000-0000-0000-000000000012"),
                            WebsiteLink = "https://www.alleskunner.be/recepten/brusselse-wafels.php"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedOn = new DateTime(2021, 11, 24, 10, 1, 56, 486, DateTimeKind.Local).AddTicks(4172),
                            Image = "https://www.alleskunner.be/images/naanbrood-janos.png",
                            Instructions = "Voeg 1 teentje knoflook toe 3 sec/snelheid 8, schraap naar beneden; Voeg 200 gr speltbloem, 2 tl bakpoeder, 150 gr yoghurt, 1 tl five spice, 10 gr olijfolie toe aan de mengbeker 1 min/deegfunctie",
                            KitchenId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Naambroodjes",
                            NumberOfPersons = 4,
                            ThemeId = new Guid("00000000-0000-0000-0000-000000000004"),
                            WebsiteLink = "https://www.alleskunner.be/recepten/naanbroodjes.php"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedOn = new DateTime(2021, 11, 24, 10, 1, 56, 486, DateTimeKind.Local).AddTicks(4183),
                            Image = "https://www.alleskunner.be/images/pompoen-tomatensoep.png",
                            Instructions = "Verwarm de oven voor op 180 graden; Spoel de pompoen af , snij de pompoen in grove stukken verwijder de pitten",
                            KitchenId = new Guid("00000000-0000-0000-0000-000000000013"),
                            Name = "Pompoen tomatensoep",
                            NumberOfPersons = 4,
                            ThemeId = new Guid("00000000-0000-0000-0000-000000000008"),
                            WebsiteLink = "https://www.alleskunner.be/recepten/pompoen-tomatensoep-balletjes.php"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedOn = new DateTime(2021, 11, 24, 10, 1, 56, 486, DateTimeKind.Local).AddTicks(4194),
                            Image = "https://www.alleskunner.be/images/longisland-icetea.png",
                            Instructions = "Doe 400 gram ijsblokjes in de mengbeker. 2 seconden, snelheid 6; Verdeel ze over 4 longdrinkglazen",
                            KitchenId = new Guid("00000000-0000-0000-0000-000000000014"),
                            Name = "Long island iced tea",
                            NumberOfPersons = 4,
                            ThemeId = new Guid("00000000-0000-0000-0000-000000000007"),
                            WebsiteLink = "https://www.alleskunner.be/recepten/long-island-icedtea.php"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatedOn = new DateTime(2021, 11, 24, 10, 1, 56, 486, DateTimeKind.Local).AddTicks(4205),
                            Image = "https://www.alleskunner.be/images/groenesmoothie-spinazie-aardbeien.png",
                            Instructions = "Doe alle ingrediënten in de mengbeker 30 seconden/snelheid 10; Schenk uit in een glas",
                            KitchenId = new Guid("00000000-0000-0000-0000-000000000015"),
                            Name = "Groene smoothie",
                            NumberOfPersons = 1,
                            ThemeId = new Guid("00000000-0000-0000-0000-000000000004"),
                            WebsiteLink = "https://www.alleskunner.be/recepten/groenesmoothie.php"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000011"),
                            CreatedOn = new DateTime(2021, 11, 24, 10, 1, 56, 486, DateTimeKind.Local).AddTicks(4217),
                            Image = "https://www.alleskunner.be/images/blog-kokenmetkinderen-milkshake.png",
                            Instructions = "We maken eerst het randje aan het glas, voeg daarvoor de 30 gr witte suiker, 2 bevroren frambozen, 1 galette koekje (in stukjes gebroken) toe aan de mengbeker 1 sec/turbo; Schraap naar beneden",
                            KitchenId = new Guid("00000000-0000-0000-0000-000000000015"),
                            Name = "Milkshake met frambozen",
                            NumberOfPersons = 5,
                            ThemeId = new Guid("00000000-0000-0000-0000-000000000012"),
                            WebsiteLink = "https://www.alleskunner.be/recepten/milkshake-frambozen.php"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000012"),
                            CreatedOn = new DateTime(2021, 11, 24, 10, 1, 56, 486, DateTimeKind.Local).AddTicks(4229),
                            Image = "https://www.alleskunner.be/images/bechamelsaus.png",
                            Instructions = " Breng alle ingrediënten in de kom; 12 min/90 graden/snelheid 4",
                            KitchenId = new Guid("00000000-0000-0000-0000-000000000015"),
                            Name = "Bechamelsaus",
                            NumberOfPersons = 4,
                            ThemeId = new Guid("00000000-0000-0000-0000-000000000012"),
                            WebsiteLink = "https://www.alleskunner.be/recepten/bechamelsaus.php"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000013"),
                            CreatedOn = new DateTime(2021, 11, 24, 10, 1, 56, 486, DateTimeKind.Local).AddTicks(4242),
                            Image = "https://www.alleskunner.be/images/tzatziki.png",
                            Instructions = "Voeg 1 komkommer ( zonder pitten) in grove stukken 5 sec/snelheid 5 voeg toe aan varomamandje laat uitlekken in mengkom; Voeg teentje knoflook + handvol dille 3 sec/ snelheid 8, schraap naar beneden opnieuw, 3 sec/snelheid 8 schraap naar beneden",
                            KitchenId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Tzatziki",
                            NumberOfPersons = 1,
                            ThemeId = new Guid("00000000-0000-0000-0000-000000000012"),
                            WebsiteLink = "https://www.alleskunner.be/recepten/tzatziki.php"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000014"),
                            CreatedOn = new DateTime(2021, 11, 24, 10, 1, 56, 486, DateTimeKind.Local).AddTicks(4254),
                            Image = "https://www.alleskunner.be/images/babyvoeding_appelwortel.jpg",
                            Instructions = "Voeg de geschilde en zonder klokhuis appel in mengbeker, schil de wortels en snij in twee;  5 sec/snelheid 5, schraap de groentjes naar beneden",
                            KitchenId = new Guid("00000000-0000-0000-0000-000000000015"),
                            Name = "Babyvoeding groenten/fruitpap",
                            NumberOfPersons = 1,
                            ThemeId = new Guid("00000000-0000-0000-0000-000000000013"),
                            WebsiteLink = "https://www.alleskunner.be/recepten/babyvoeding_appelwortel.php"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000015"),
                            CreatedOn = new DateTime(2021, 11, 24, 10, 1, 56, 486, DateTimeKind.Local).AddTicks(4267),
                            Image = "https://www.alleskunner.be/images/vegan-mayonaise.png",
                            Instructions = "Voeg een maatbekertje op de mengbeker en weeg 300 gr zonnebloemolie af, zet het maatbekertje opzij; Voeg in de mengbeker 150 gr (amandel) melk, snuifje zout en koffielepel mosterd toe",
                            KitchenId = new Guid("00000000-0000-0000-0000-000000000015"),
                            Name = "Vegan Mayonaise",
                            NumberOfPersons = 1,
                            ThemeId = new Guid("00000000-0000-0000-0000-000000000004"),
                            WebsiteLink = "https://www.alleskunner.be/recepten/vegan-mayonaise.php"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.RecipeIngredients", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("RecipeIngredients");

                    b.HasData(
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000001"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Amount = 1.0
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000002"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Amount = 1.0,
                            Unit = "centiliter"
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000003"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Amount = 175.0,
                            Unit = "gram"
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000004"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Amount = 4.0
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000005"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Amount = 2.0
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000006"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Amount = 1.0,
                            Unit = "teentje"
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000007"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Amount = 150.0,
                            Unit = "gram"
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000007"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Amount = 150.0,
                            Unit = "teentje"
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000007"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Amount = 1.0
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000008"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Amount = 1.0,
                            Unit = "centiliter"
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000009"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Amount = 200.0,
                            Unit = "yoghurt"
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000010"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Amount = 25.0,
                            Unit = "centiliter"
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000011"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Amount = 80.0,
                            Unit = "gram"
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000012"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Amount = 1.5,
                            Unit = "centiliter"
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000013"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000013"),
                            Amount = 2.0
                        },
                        new
                        {
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000014"),
                            IngredientId = new Guid("00000000-0000-0000-0000-000000000014"),
                            Amount = 1.0,
                            Unit = "snuifje"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.RecipePhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HighlightedImage")
                        .HasColumnType("bit");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId1");

                    b.ToTable("RecipePhotos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            HighlightedImage = true,
                            ImageLink = "https://www.alleskunner.be/images/nasigoreng.png",
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            HighlightedImage = true,
                            ImageLink = "https://www.alleskunner.be/images/dumplings.png",
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            HighlightedImage = true,
                            ImageLink = "https://www.alleskunner.be/images/aardappelpuree.png",
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            HighlightedImage = true,
                            ImageLink = "https://www.alleskunner.be/images/bruschetta.png",
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000004"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            HighlightedImage = true,
                            ImageLink = "https://www.alleskunner.be/images/brusselse-wafels.png",
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000005"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            HighlightedImage = true,
                            ImageLink = "https://www.alleskunner.be/images/naanbrood-janos.png",
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000006"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            HighlightedImage = true,
                            ImageLink = "https://www.alleskunner.be/images/pompoen-tomatensoep.png",
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000007"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            HighlightedImage = true,
                            ImageLink = "https://www.alleskunner.be/images/longisland-icetea.png",
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000008"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            HighlightedImage = true,
                            ImageLink = "https://www.alleskunner.be/images/groenesmoothie-spinazie-aardbeien.png",
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000009"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            HighlightedImage = true,
                            ImageLink = "https://www.alleskunner.be/images/blog-kokenmetkinderen-milkshake.png",
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000010"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            HighlightedImage = true,
                            ImageLink = "https://www.alleskunner.be/images/bechamelsaus.png",
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000011"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            HighlightedImage = true,
                            ImageLink = "https://www.alleskunner.be/recepten/tzatziki.php",
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000012"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            HighlightedImage = true,
                            ImageLink = "https://www.alleskunner.be/images/babyvoeding_appelwortel.jpg",
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000013"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            HighlightedImage = true,
                            ImageLink = "https://www.alleskunner.be/images/vegan-mayonaise.png",
                            RecipeId = new Guid("00000000-0000-0000-0000-000000000014"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Theme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Pasen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Kerst"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Barbecue"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Gezond"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Halloween"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Herfst"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Zomer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Winter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Lente"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Raclette"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Name = "Aziatisch"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Name = "Alledaags"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Name = "Babyvoeding"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc58",
                            DoB = new DateTime(1952, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Jane.Doe@user.be",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            Gender = 1,
                            IsAdmin = false,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.DOE@USER.BE",
                            NormalizedUserName = "JDOE",
                            PasswordHash = "AQAAAAEAACcQAAAAENa6kwiApRRyBV/QxvgA2ex4UYsqQTR733D3by9VW2vOjSTaQvZ5wY0SmMg63jZXRA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://randomuser.me/api/portraits/women/10.jpg",
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TermsAndConditions = true,
                            TwoFactorEnabled = false,
                            UserName = "JDoe"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3cfafe8-4386-11ec-81d3-0242ac130003",
                            DoB = new DateTime(1967, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Joe.Doe@user.be",
                            EmailConfirmed = true,
                            FirstName = "Joe",
                            Gender = 0,
                            IsAdmin = false,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOE.DOE@USER.BE",
                            NormalizedUserName = "JOED",
                            PasswordHash = "AQAAAAEAACcQAAAAEFUG3wPgdLq0/S/i7zuOinAiVBLCzcirnoNCspjsFTvD1K8rPu5a4Tnwh1zYhk6N8w==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://randomuser.me/api/portraits/men/49.jpg",
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TermsAndConditions = true,
                            TwoFactorEnabled = false,
                            UserName = "JoeD"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3cfb222-4386-11ec-81d3-0242ac130003",
                            DoB = new DateTime(1950, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Cucum.Terrarun@user.be",
                            EmailConfirmed = true,
                            FirstName = "Cucum",
                            Gender = 2,
                            IsAdmin = false,
                            LastName = "Terrarun",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUCUM.TERRARUN@USER.BE",
                            NormalizedUserName = "CUCUMT",
                            PasswordHash = "AQAAAAEAACcQAAAAED71qLuBG3YQHAObCq2+XJ6N4Wkv7x+8TzLtFUBa7LAQRHz5AwSLpISoqHS9A0Gu/A==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://randomuser.me/api/portraits/lego/6.jpg",
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TermsAndConditions = false,
                            TwoFactorEnabled = false,
                            UserName = "CucumT"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3cfb31c-4386-11ec-81d3-0242ac130003",
                            DoB = new DateTime(1990, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Lantain.Skybone@user.be",
                            EmailConfirmed = true,
                            FirstName = "Lantain",
                            Gender = 1,
                            IsAdmin = false,
                            LastName = "Skybone",
                            LockoutEnabled = false,
                            NormalizedEmail = "LANTAIN.SKYBONE@USER.BE",
                            NormalizedUserName = "SKYBONEL",
                            PasswordHash = "AQAAAAEAACcQAAAAEF3OuNHwgEFnAZrGv86Lm6j8SE6pusYmk7gGYIzL+URpDSmc8S6VrqLR5WuZGI/Pzw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://randomuser.me/api/portraits/women/91.jpg",
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TermsAndConditions = true,
                            TwoFactorEnabled = false,
                            UserName = "SkyboneL"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3cfb3e4-4386-11ec-81d3-0242ac130003",
                            DoB = new DateTime(1973, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Peppa.Distantshadow@user.be",
                            EmailConfirmed = true,
                            FirstName = "Peppa",
                            Gender = 0,
                            IsAdmin = false,
                            LastName = "Distantshadow",
                            LockoutEnabled = false,
                            NormalizedEmail = "PEPPA.DISTANTSHADOW@USER.BE",
                            NormalizedUserName = "PEPPAD",
                            PasswordHash = "AQAAAAEAACcQAAAAEImrZjE9XldYAbNXuBzNSfjyUl/ZiG/H+WN4+Ok4JtfYJM6ziWIEtwXN0noYVFlmqA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://randomuser.me/api/portraits/men/4.jpg",
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TermsAndConditions = true,
                            TwoFactorEnabled = false,
                            UserName = "PeppaD"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3cfb4ac-4386-11ec-81d3-0242ac130003",
                            DoB = new DateTime(1989, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Pinach.Flatwood@user.be",
                            EmailConfirmed = true,
                            FirstName = "Pinach",
                            Gender = 2,
                            IsAdmin = false,
                            LastName = "Flatwood",
                            LockoutEnabled = false,
                            NormalizedEmail = "PINACH.FLATWOOD@USER.BE",
                            NormalizedUserName = "FLATWOODP",
                            PasswordHash = "AQAAAAEAACcQAAAAEKLK1yLqy1yN37nm3mEa/kCVPYyzMQQIrm7g79p8lTH32GWNseAzIJ0qAGU17l/3Rg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://randomuser.me/api/portraits/lego/0.jpg",
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TermsAndConditions = true,
                            TwoFactorEnabled = false,
                            UserName = "FlatwoodP"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3cfb786-4386-11ec-81d3-0242ac130003",
                            DoB = new DateTime(1982, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Kallabash.Titanhand@user.be",
                            EmailConfirmed = true,
                            FirstName = "Kallabash",
                            Gender = 1,
                            IsAdmin = false,
                            LastName = "Titanhand",
                            LockoutEnabled = false,
                            NormalizedEmail = "KALLABASH.TITANHAND@USER.BE",
                            NormalizedUserName = "KALLABASHT",
                            PasswordHash = "AQAAAAEAACcQAAAAEJapiBp7EiJpo4306I9TjWQxwgRBIGXE3TPbDbNIIIjRU+mq3LVg4TfJV8GrKlrDzw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://randomuser.me/api/portraits/women/82.jpg",
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TermsAndConditions = true,
                            TwoFactorEnabled = false,
                            UserName = "KallabashT"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3cfb858-4386-11ec-81d3-0242ac130003",
                            DoB = new DateTime(1979, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Gorlick.Deathgrove@user.be",
                            EmailConfirmed = true,
                            FirstName = "Gorlick",
                            Gender = 0,
                            IsAdmin = false,
                            LastName = "Deathgrove",
                            LockoutEnabled = false,
                            NormalizedEmail = "GORLICK.DEATHGROVE@USER.BE",
                            NormalizedUserName = "GORLICKD",
                            PasswordHash = "AQAAAAEAACcQAAAAEOVhqzoSs+kxxod7SQ6uSaeUesHxK6zuPKsChqsE33sX0TcUoeH1XIJbsBT5EpZDfw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://randomuser.me/api/portraits/men/64.jpg",
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TermsAndConditions = true,
                            TwoFactorEnabled = false,
                            UserName = "GorlickD"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3cfb902-4386-11ec-81d3-0242ac130003",
                            DoB = new DateTime(1974, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Courge.Voidwound@user.be",
                            EmailConfirmed = true,
                            FirstName = "Courge",
                            Gender = 2,
                            IsAdmin = false,
                            LastName = "Voidwound",
                            LockoutEnabled = false,
                            NormalizedEmail = "COURGE.VOIDWOUND@USER.BE",
                            NormalizedUserName = "COURGEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEPfZiM0xdDVVYWu/oW7g/AQM2LW5YmewlMGEsGQssLorBBHW7VsKaGEPElmrwFEdSQ==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://randomuser.me/api/portraits/lego/3.jpg",
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TermsAndConditions = true,
                            TwoFactorEnabled = false,
                            UserName = "CourgeV"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3cfb9b6-4386-11ec-81d3-0242ac130003",
                            DoB = new DateTime(1952, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Leeck.Swiftblood@user.be",
                            EmailConfirmed = true,
                            FirstName = "Leeck",
                            Gender = 0,
                            IsAdmin = false,
                            LastName = "Switfblood",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEECK.SWIFTBLOOD@USER.BE",
                            NormalizedUserName = "LEECKS",
                            PasswordHash = "AQAAAAEAACcQAAAAEAbvdK6COmnnyCG4vsinH2xNk7ii3E5DnqueYMPUmU3pqvUerwzMizbUafFGFKWmnw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://randomuser.me/api/portraits/men/86.jpg",
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TermsAndConditions = true,
                            TwoFactorEnabled = false,
                            UserName = "LeeckS"
                        },
                        new
                        {
                            Id = "11000000-0000-0000-0000-0000000000",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3cfba6a-4386-11ec-81d3-0242ac130003",
                            DoB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Admin@user.be",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            Gender = 0,
                            IsAdmin = true,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@USER.BE",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENyUTRl6zt4VtUBQEpQIkvPKnkpPx/YkPcEaE6cwQ8YYUPMSG30wrpdXhKwA+AwDVw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://randomuser.me/api/portraits/men/74.jpg",
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TermsAndConditions = true,
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "22000000-0000-0000-0000-0000000000",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3cfba6a-4386-11ec-81d3-0242ac130003",
                            DoB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Super.Admin@user.be",
                            EmailConfirmed = true,
                            FirstName = "Super",
                            Gender = 0,
                            IsAdmin = true,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPER.ADMIN@USER.BE",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEEkLDEfKPVKj0Ad5Jd8pOJPlGWfodEA/wpfLmCMS4LQLQOuZADS4WY41U8o05EDyZg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://randomuser.me/api/portraits/lego/2.jpg",
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TermsAndConditions = true,
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "10000000-0000-0000-0000-000000000000",
                            ConcurrencyStamp = "42111277-3742-4fdb-ae48-0b62b14ce7fc",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "20000000-0000-0000-0000-000000000000",
                            ConcurrencyStamp = "0a35c01d-6def-4e00-8874-5fc277661dff",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "11000000-0000-0000-0000-0000000000",
                            RoleId = "10000000-0000-0000-0000-000000000000"
                        },
                        new
                        {
                            UserId = "22000000-0000-0000-0000-0000000000",
                            RoleId = "20000000-0000-0000-0000-000000000000"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Recipe", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Category", "Category")
                        .WithMany("Recipes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Kitchen", "Kitchen")
                        .WithMany("Recipes")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Theme", "Theme")
                        .WithMany("Recipes")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany("FavoriteRecipes")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("Kitchen");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.RecipeIngredients", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.RecipePhoto", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Recipe", "Recipe")
                        .WithMany("RecipePhotos")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("RecipePhotos")
                        .HasForeignKey("UserId1");

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Category", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Ingredient", b =>
                {
                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Kitchen", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Recipe", b =>
                {
                    b.Navigation("RecipeIngredients");

                    b.Navigation("RecipePhotos");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Theme", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Navigation("FavoriteRecipes");

                    b.Navigation("RecipePhotos");
                });
#pragma warning restore 612, 618
        }
    }
}
