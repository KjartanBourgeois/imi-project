@inject ICategoryService categoryService;
@inject IRecipeService recipeService;
@inject IKitchenService kitchenService;
@inject IThemeService themeService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject NavigationManager UriHelper;

<EditForm Model="@recipeRequestDto">
    <div class="form-group">
        <label for="name">Title: </label>
        <InputText id="name" @bind-Value="recipeRequestDto.Name" class="form-control" />
        <ValidationMessage For="@(() => recipeRequestDto.Name)" />
    </div>

    <div class="form-group">
        <label for="nOP">Number of persons: </label>
        <InputNumber id="nOP" @bind-Value="recipeRequestDto.NumberOfPersons" class="form-control" />
        <ValidationMessage For="@(() => recipeRequestDto.NumberOfPersons)" />
    </div>

    <div class="form-group">
        <label for="category">Category: </label>
        <InputSelect id="category" @bind-Value="selectedCategoryId" class="form-control">
            @foreach (var item in categories)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => recipeRequestDto.CategoryId)" />
    </div>

    <div class="form-group">
        <label for="kitchen">Kitchen: </label>
        <InputSelect id="kitchen" @bind-Value="selectedKitchenId" class="form-control">
            @foreach (var item in kitchens)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => recipeRequestDto.KitchenId)" />
    </div>

    <div class="form-group">
        <label for="theme">Theme: </label>
        <InputSelect id="theme" @bind-Value="selectedThemeId" class="form-control">
            @foreach (var item in themes)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => recipeRequestDto.ThemeId)" />
    </div>

    <div class="form-group">
        <label for="imageLink">Image link: </label>
        <InputText id="imageLink" @bind-Value="recipeRequestDto.Image" class="form-control" />
        <ValidationMessage For="@(() => recipeRequestDto.Image)" />
    </div>

    <button @onclick="CreateRecipe" class="btn btn-primary">Create</button>
    <button class="btn btn-warning">Cancel</button>
</EditForm>

@code {
    private RecipeRequestDto recipeRequestDto = new RecipeRequestDto();
    private string selectedCategoryId;
    private string selectedKitchenId;
    private string selectedThemeId;
    private string token;
    private List<CategoryResponseDto> categories = new List<CategoryResponseDto>();
    private List<KitchenResponseDto> kitchens = new List<KitchenResponseDto>();
    private List<ThemeResponseDto> themes = new List<ThemeResponseDto>();

    protected override async Task OnInitializedAsync()
    {
        await BindData();
    }

    public async Task BindData()
    {
        var getCategories = await categoryService.GetAllCategories();
        var getKitchens = await kitchenService.GetAllKitchens();
        var getThemes = await themeService.GetAllThemes();
        categories = getCategories.ToList();
        kitchens = getKitchens.ToList();
        themes = getThemes.ToList();
    }

    public async Task CreateRecipe()
    {
        token = await localStorage.GetItemAsync<string>("jwtToken");
        var newRecipe = this.recipeRequestDto;
        newRecipe.Id = Guid.NewGuid();
        newRecipe.CategoryId = Guid.Parse(selectedCategoryId);
        newRecipe.KitchenId = Guid.Parse(selectedKitchenId);
        newRecipe.ThemeId = Guid.Parse(selectedThemeId);
        newRecipe.Instructions = "N/A";
        newRecipe.WebsiteLink = new Uri("https://www.youtube.com/watch?v=dQw4w9WgXcQ");
        var result = await recipeService.AddRecipe(newRecipe, token);

        UriHelper.NavigateTo("recipes");
    }


}
