@{
    ViewData["Title"] = "Categories Page";
}
<div class="text-center my-5">
    <h2>Categorieën</h2>
</div>


<div id="app" class="row">

    <div class="col-md-12">
        <div class="alert alert-info" v-if="feedback">
            {{feedback}}
        </div>
    </div>

    <div class="col-md-3">
        <ul class="list-group">
            <li v-for="category in categories" v-on:click="getCategoryDetail(category)" class="list-group-item">
                <h5>{{category.name}}</h5>
            </li>
        </ul>
    </div>
    <div class="col-md-3">
        <button class="btn btn-primary my-3" v-on:click="toNewMode()" v-bind:disabled="isUpdate">Nieuw</button>
        <button class="btn btn-warning my-3" v-on:click="toEditMode()" v-bind:disabled="isNew">Update</button>
        <button class="btn btn-primary my-1" v-on:click="createCategory()">Voeg nieuw toe</button> <br />
        <button class="btn btn-warning my-1" v-on:click="updateCategory()">Update de categorie</button> <br />
        <button class="btn btn-danger my-1" v-on:click="deleteCategory()">Verwijder categorie</button> <br />
    </div>
    <div class="col-md-3" v-if="selectedCategory">
        <label class="font-weight-bold">Naam Categorie :</label>
        <input class="form-control" v-bind:readonly="isReadOnly" v-model="selectedCategory.name"/>
    </div>
</div>
@section scripts{
<script src="~/lib/vue/vue.js"></script>
<script src="~/lib/axios/axios.min.js"></script>

<script>
    var apiUrl = 'https://localhost:5001/api/Categories';
    const token = localStorage.getItem('jwtToken');
    const config = {headers: { Authorization: `Bearer ${token}` }};
    var app = new Vue({
        el: '#app',
        data:{
            categories: [],
            selectedCategory: null,
            isReadOnly: true,
            isNew: false,
            isUpdate: false,
            feedback: ""
        },
        created: function(){
            var self =this;
            self.fetchCategories();
        },
        methods:{
            fetchCategories: function(){
                var self = this;
                return axios.get(apiUrl, config)
                    .then(res => {
                        self.categories = res.data;
                    });
            },
            getCategoryDetail: function(category){
                var self = this;
                self.selectedCategory = category;
                window.scrollTo(0,0);
            },
            toNewMode: function(){
                var self = this;
                self.isReadOnly = false;
                self.isNew = true;
                self.selectedCategory = {};
            },
            toEditMode: function(){
                var self = this;
                self.isUpdate = true;
                self.isReadOnly = false;
            },
            createCategory: async function(){
                var self = this;
                var dto = {
                    Id: self.selectedCategory.id,
                    Name: self.selectedCategory.name,
                };
                await axios.post(apiUrl, dto, config)
                    .then(function(response){
                        self.feedback = `Categorie ${self.selectedCategory.name} is aangemaakt`;
                    })
                    .catch(function (error){
                        console.log(error.response);
                    })
                    .then(function() {
                        self.isReadOnly = true;
                        self.isNew = false;
                        setTimeout(function () {self.feedback = null; }, 3000);
                    });
            },
            updateCategory: async function(){
                var self = this;
                var dto = {
                    Id: self.selectedCategory.id,
                    Name: self.selectedCategory.name,
                };
                await axios.put(apiUrl, dto, config)
                    .then(function(response){
                        self.feedback = `Categorie ${self.selectedCategory.name} is aangepast`;
                    })
                    .catch(function (error){
                        console.log(error.response);
                    })
                    .then(function() {
                        self.isReadOnly = true;
                        self.isUpdate = false;
                        setTimeout(function () {self.feedback = null; }, 3000);
                    });
            },
            deleteCategory: async function(){
                var self = this;
                var url = `${apiUrl}/${self.selectedCategory.id}`;
                await axios.delete(url, config)
                      .then(function(response){
                        self.feedback = `recept ${self.selectedCategory.name} is verwijderd`
                      })
                      .catch(function (error){
                        console.log(error.response);
                      })
                      .then(function() {
                        self.isreadonly = true;
                        settimeout(function () {self.feedback = null; }, 3000);
                    });
            }
        }

    });

</script>
}